require File.join(File.dirname(`node --print "require.resolve('expo/package.json')"`), "scripts/autolinking")
require File.join(File.dirname(`node --print "require.resolve('react-native/package.json')"`), "scripts/react_native_pods")

require 'json'
podfile_properties = JSON.parse(File.read(File.join(__dir__, 'Podfile.properties.json'))) rescue {}

ENV['RCT_NEW_ARCH_ENABLED'] = '0' if podfile_properties['newArchEnabled'] == 'false'
ENV['EX_DEV_CLIENT_NETWORK_INSPECTOR'] = podfile_properties['EX_DEV_CLIENT_NETWORK_INSPECTOR']

platform :ios, podfile_properties['ios.deploymentTarget'] || '15.1'
install! 'cocoapods',
  :deterministic_uuids => false

prepare_react_native_project!

target 'copilotsh' do
  use_expo_modules!

  if ENV['EXPO_USE_COMMUNITY_AUTOLINKING'] == '1'
    config_command = ['node', '-e', "process.argv=['', '', 'config'];require('@react-native-community/cli').run()"];
  else
    config_command = [
      'npx',
      'expo-modules-autolinking',
      'react-native-config',
      '--json',
      '--platform',
      'ios'
    ]
  end

  config = use_native_modules!(config_command)

  use_frameworks! :linkage => podfile_properties['ios.useFrameworks'].to_sym if podfile_properties['ios.useFrameworks']
  use_frameworks! :linkage => ENV['USE_FRAMEWORKS'].to_sym if ENV['USE_FRAMEWORKS']

  use_react_native!(
    :path => config[:reactNativePath],
    :hermes_enabled => podfile_properties['expo.jsEngine'] == nil || podfile_properties['expo.jsEngine'] == 'hermes',
    # An absolute path to your application root.
    :app_path => "#{Pod::Config.instance.installation_root}/..",
    :privacy_file_aggregation_enabled => podfile_properties['apple.privacyManifestAggregationEnabled'] != 'false',
  )

  post_install do |installer|
    react_native_post_install(
      installer,
      config[:reactNativePath],
      :mac_catalyst_enabled => false,
      :ccache_enabled => podfile_properties['apple.ccacheEnabled'] == 'true',
    )

    # This is necessary for Xcode 14, because it signs resource bundles by default
    # when building for devices.
    installer.target_installation_results.pod_target_installation_results
      .each do |pod_name, target_installation_result|
      target_installation_result.resource_bundle_targets.each do |resource_bundle_target|
        resource_bundle_target.build_configurations.each do |config|
          config.build_settings['CODE_SIGNING_ALLOWED'] = 'NO'
        end
      end
    end

    # Ensure dSYMs are generated for Release (fixes missing Hermes dSYM on archive)
    installer.pods_project.targets.each do |target|
      target.build_configurations.each do |config|
        if config.name == 'Release'
          config.build_settings['DEBUG_INFORMATION_FORMAT'] = 'dwarf-with-dsym'
          config.build_settings['GCC_GENERATE_DEBUGGING_SYMBOLS'] = 'YES'
          # Avoid stripping symbols from the installed product in Release
          config.build_settings['STRIP_INSTALLED_PRODUCT'] = 'NO'
          config.build_settings['COPY_PHASE_STRIP'] = 'NO'
        end
      end
    end

    # Add a script phase to bundle Hermes dSYM into the archive (if present)
    installer.aggregate_targets.each do |aggregate_target|
      aggregate_target.user_project.native_targets.each do |native_target|
        next unless native_target.name == 'copilotsh'

        phase_name = 'Bundle Hermes dSYM'
        already_added = native_target.shell_script_build_phases.any? { |bp| bp.name == phase_name }
        unless already_added
          script_phase = native_target.new_shell_script_build_phase(phase_name)
          script_phase.shell_path = '/bin/sh'
          script_phase.shell_script = <<-EOS
set -e

# Copy any Hermes dSYM we can find under Pods into the archive's dSYM folder
if [ -n "${DWARF_DSYM_FOLDER_PATH}" ]; then
  PODS_ROOT_ESCAPED="${PODS_ROOT// /\\ }"
  DEST_DSYM_DIR="${DWARF_DSYM_FOLDER_PATH}"
  # Prefer built dSYM if it exists
  if [ -d "${PODS_CONFIGURATION_BUILD_DIR}/hermes-engine/hermes.framework.dSYM" ]; then
    ditto "${PODS_CONFIGURATION_BUILD_DIR}/hermes-engine/hermes.framework.dSYM" "${DEST_DSYM_DIR}/hermes.framework.dSYM"
  else
    # Fallback: search prebuilt artifacts under Pods
    FOUND_HERMES_DSYM=$(find "${PODS_ROOT_ESCAPED}" -type d -name 'hermes.framework.dSYM' 2>/dev/null | head -n 1)
    if [ -n "${FOUND_HERMES_DSYM}" ]; then
      ditto "${FOUND_HERMES_DSYM}" "${DEST_DSYM_DIR}/hermes.framework.dSYM"
    fi
  fi
fi
          EOS
          # Only run during install/archive (not for every build)
          script_phase.run_only_for_deployment_postprocessing = '1'
        end
      end
    end
  end
end
